// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (user_id, name, birthday, gender, created_at, updated_at)
VALUES ($1, $2, $3, $4, NOW(), NOW())
RETURNING user_id, name, birthday, gender, created_at, updated_at
`

type CreateUserParams struct {
	UserID   pgtype.UUID `json:"user_id"`
	Name     string      `json:"name"`
	Birthday pgtype.Date `json:"birthday"`
	Gender   GenderType  `json:"gender"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.UserID,
		arg.Name,
		arg.Birthday,
		arg.Gender,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Birthday,
		&i.Gender,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE user_id = $1
`

// Note: This will cascade delete all user's events, attendances, messages, and likes
func (q *Queries) DeleteUser(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, userID)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT user_id, name, birthday, gender, created_at, updated_at FROM users WHERE user_id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, userID pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Birthday,
		&i.Gender,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET name = $2,
    birthday = $3,
    gender = $4,
    updated_at = NOW()
WHERE user_id = $1
RETURNING user_id, name, birthday, gender, created_at, updated_at
`

type UpdateUserParams struct {
	UserID   pgtype.UUID `json:"user_id"`
	Name     string      `json:"name"`
	Birthday pgtype.Date `json:"birthday"`
	Gender   GenderType  `json:"gender"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.UserID,
		arg.Name,
		arg.Birthday,
		arg.Gender,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Birthday,
		&i.Gender,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
